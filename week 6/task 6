class MagicDictionary {
public:
	/** Initialize your data structure here. */
	unordered_map<int,vector<string>> m;
	MagicDictionary() {

	}

	/** Build a dictionary through a list of words */
	void buildDict(vector<string> dict) {
		for(auto x:dict){
			m[x.size()].push_back(x);
		}
	}

	/** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */
	bool search(string word) {
		int len=word.size();
		for(auto v:m[len]){
			int count=0;
			for(int i=0;i<v.size();i++){
				if(v[i]!=word[i]){
					count++;
				}
				if(count>1) continue;
				if(i==v.size()-1 && count==1) return true;
			}

		}
		return false;
	}
};
/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dict);
 * bool param_2 = obj->search(word);
 */
